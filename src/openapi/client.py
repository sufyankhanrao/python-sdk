# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import BitadventurerApiEnvironment
from .types.model import Model
import httpx
from .core.client_wrapper import SyncClientWrapper
from .core.request_options import RequestOptions
from .core.serialization import convert_and_respect_annotation_metadata
from .core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BitadventurerApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : BitadventurerApiEnvironment
        The environment to use for requests from the client. from .environment import BitadventurerApiEnvironment



        Defaults to BitadventurerApiEnvironment.DEFAULT



    header_param : Model
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from bitadventurer import BitadventurerApi

    client = BitadventurerApi(
        header_param="YOUR_HEADER_PARAM",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: BitadventurerApiEnvironment = BitadventurerApiEnvironment.DEFAULT,
        header_param: Model,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else None
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            header_param=header_param,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def send_body(
        self, *, request: Model, request_options: typing.Optional[RequestOptions] = None
    ) -> Model:
        """
        Parameters
        ----------
        request : Model

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Model
            Successful response

        Examples
        --------
        from bitadventurer import BitadventurerApi, Cat

        client = BitadventurerApi(
            header_param="YOUR_HEADER_PARAM",
        )
        client.send_body(
            request=Cat(
                name="string",
                lives=1,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "send-body",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=Model, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Model,
                    parse_obj_as(
                        type_=Model,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_form(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Model:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Model
            Successful response

        Examples
        --------
        from bitadventurer import BitadventurerApi

        client = BitadventurerApi(
            header_param="YOUR_HEADER_PARAM",
        )
        client.send_form()
        """
        _response = self._client_wrapper.httpx_client.request(
            "send-form",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Model,
                    parse_obj_as(
                        type_=Model,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBitadventurerApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : BitadventurerApiEnvironment
        The environment to use for requests from the client. from .environment import BitadventurerApiEnvironment



        Defaults to BitadventurerApiEnvironment.DEFAULT



    header_param : Model
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from bitadventurer import AsyncBitadventurerApi

    client = AsyncBitadventurerApi(
        header_param="YOUR_HEADER_PARAM",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: BitadventurerApiEnvironment = BitadventurerApiEnvironment.DEFAULT,
        header_param: Model,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else None
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            header_param=header_param,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def send_body(
        self, *, request: Model, request_options: typing.Optional[RequestOptions] = None
    ) -> Model:
        """
        Parameters
        ----------
        request : Model

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Model
            Successful response

        Examples
        --------
        import asyncio

        from bitadventurer import AsyncBitadventurerApi, Cat

        client = AsyncBitadventurerApi(
            header_param="YOUR_HEADER_PARAM",
        )


        async def main() -> None:
            await client.send_body(
                request=Cat(
                    name="string",
                    lives=1,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "send-body",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=Model, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Model,
                    parse_obj_as(
                        type_=Model,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_form(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Model:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Model
            Successful response

        Examples
        --------
        import asyncio

        from bitadventurer import AsyncBitadventurerApi

        client = AsyncBitadventurerApi(
            header_param="YOUR_HEADER_PARAM",
        )


        async def main() -> None:
            await client.send_form()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "send-form",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Model,
                    parse_obj_as(
                        type_=Model,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: BitadventurerApiEnvironment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception(
            "Please pass in either base_url or environment to construct the client"
        )
